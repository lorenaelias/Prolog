%%01.-----------------------------------------------------------

n_esimo_cc(1,A1,_,A1).
n_esimo_cc(N,A1,R,AN):-
    N>1,
    A2 is A1 + R,
    N1 is N-1,
    n_esimo_cc(N1,A2,R,AN).

n_esimo(1,A1,_,A1).
n_esimo(N,A1,Ra,A):-
    A is (N-1)*Ra + A1.

n_esimo2(1,I,_,I). 
n_esimo2(N,I,R,ANS):-
    N1 is N-1,
    pa(N1,I,R,ANS1),
    ANS is R+ANS1.

%%02.-----------------------------------------------------------

sumPa_cc(A1, R, N, ANS):-
    n_esimo_cc(N,A1,R,AN),
    ANS is ((A1+AN)*N)/2. 

sumPa(1,A1,_,A1,A1).
sumPa(N,A1,R,PA,S):-
    N>1,
    N1 is N-1,
    sumPa(N1,A1,R,PA1,S1),
    PA is PA1+R,
    S is S1+R.

%%03. ----------------------------------------------------------

	1. X = a.
	2. X = [ ].
	3. false
	4. X = [a].
	5. false
	6. X = a
	    Y = b.
	7. false
	8. X = a
	    Y = b
	    Z = c
	9. false
	10. X = a
	      Y = b
	11. X = a
	      Y = [ ]
	12. false
	13. X = a
	      Y = [b,c]
	14. X = a
	      Y = b
	      Z = [c]
	15. X = a
	      Y = b
	      Z = [ ]
	16. false
	17. X = a
	      Y = b
	      Z = [c,d]
	18. X = a
	      Y = b
	      Z = [a]   
	19. X = Z , Z = [a]
	      Y = b

%%04. ----------------------------------------------------------

n_esimo(X,[X|_],1).
n_esimo(X,[_|L],N):-
	N>1,
	N1 is N-1,
	n_esimo(X,L,N1).

%%05.-----------------------------------------------------------

no_elementos([],0).
no_elementos([_|L],N) :-
	no_elementos(L,N1),
	N is N1+1.

%%06.07.-------------------------------------------------------

tire_elemento(X,[X|Y],Y).
tire_elemento(X,[Y|C],[Y|D]):-
	X\=Y,
	tire_elemento(X,C,D).

%%08.09.--------------------------------------------------------

retirar_ocor(_,[],[]).
retirar_ocor(X,[X|Y],R):-
	retirar_ocor(X,Y,R).
retirar_ocor(Z,[X|Y],R):-
	X\=Z,
	retirar_ocor(Z,Y,R1),
	R = [X|R1].

%%10.-----------------------------------------------------------

pertence([X|_],Z):-
	Z=X,!.
pertence([_|Y],Z):-
	pertence(Y,Z).

retire_repet([],[]).                      %%%% ta dando pau essa disgraca
retire_repet([X|Y],L1):-
	pertence(X,Y),
	retire_repet(Y,L1).


%%11.-----------------------------------------------------------

concat1([],A,A).
concat1([X|Y],L,[X|R]):-
    concat1(Y,L,R).

%%12.-----------------------------------------------------------

maior([X],X).
maior([X|[Y|Z]],L):-
    (X>Y),
    maior([X|Z],L).

maior([X|[Y|Z]],L):-
    (Y>=X),
    maior([Y|Z],L).

%%13.-----------------------------------------------------------

menor([X],X).
menor([X|[Y|Z]],L):-
    (X<Y),
    menor([X|Z],L).

menor([X|[Y|Z]],L):-
    (X>=Y),
    menor([Y|Z],L).

%%14.------------------------------------------------------------




%%15.------------------------------------------------------------

inserir_cabeca(R,X,[X|R]).

%%16.------------------------------------------------------------




%%17.-----------------------------------------------------------

inverte([],[]).
inverte([X|Y],R):-
    inverte(Y,R1),
    append(R1,[X],R).

%%18.----------------------------------------------------------



%%19.----------------------------------------------------------

concat1([],A,A).
concat1([X|Y],L,[X|R]):-
    concat1(Y,L,R).

nplica(_,[],[]).
nplica(N,[X|Y],R):-
	nplica(N,Y,R2),
	aux(X,N,R1),
	concat1(R1,R2,R).

%%20.----------------------------------------------------------



%%21.----------------------------------------------------------

nao_vazia([X|Y],[Z|W]):-
    not(disjuntos([X|Y],[Z|W])).

%%22.----------------------------------------------------------



%%23.----------------------------------------------------------

disjuntos(_,[]).
disjuntos([],_).
disjuntos([X|Y],[Z|W]):-
    disjuntos(Y,[Z|W]),
    not(pertence([Z|W],X)).

pertence([X|_],Z):-
	Z=X,!.
pertence([_|Y],Z):-
	pertence(Y,Z).

%%24.----------------------------------------------------------

igual([X],[X]):-
	!.
igual([X|Y],[X|Z]):-
	igual(Y,Z).
